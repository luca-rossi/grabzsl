import argparse

parser = argparse.ArgumentParser()
parser.add_argument('--dataset', '-d', default='FLO', help='dataset name (folder containing the res101.mat and att_splits.mat files)')
parser.add_argument('--dataroot', '-p', default='./data', help='path to dataset')
parser.add_argument('--split', '-s', default='', help='name of the split (e.g. \'_gcs\', \'_mas\', etc.)')
parser.add_argument('--seed', type=int, help='manual seed (for reproducibility)')
parser.add_argument('--n_features', type=int, default=2048, help='size of visual features')
parser.add_argument('--n_attributes', type=int, default=85, help='size of semantic features')
parser.add_argument("--latent_size", type=int, default=85, help='size of the latent z vector')
parser.add_argument('--features_per_class', type=int, default=1800, help='number features to generate per class')
parser.add_argument('--batch_size', type=int, default=64, help='input batch size')
parser.add_argument("--hidden_size", type=int, default=4096, help='size of the hidden layers')
parser.add_argument('--n_epochs', type=int, default=30, help='number of epochs to train for')
parser.add_argument('--n_classes', type=int, default=50, help='number of all classes')
parser.add_argument('--n_critic_iters', type=int, default=5, help='number of critic training iterations per epoch')
parser.add_argument('--n_loops', type=int, default=2, help='number of iterations per epoch')
parser.add_argument('--beta1', type=float, default=0.5, help='beta1 for adam')
parser.add_argument('--freeze_dec', action='store_true', default=False, help='freeze decoder for fake samples')
parser.add_argument('--lr', type=float, default=0.001, help='learning rate of the GAN')
parser.add_argument('--lr_feedback', type=float, default=0.0001, help='learning rate of the feedback module')
parser.add_argument('--lr_decoder', type=float, default=0.0001, help='learning rate of the decoder')
parser.add_argument('--lr_cls', type=float, default=0.001, help='learning rate of the softmax classifier')
parser.add_argument('--weight_gp', type=float, default=10, help='gradient penalty regularizer')
parser.add_argument('--weight_precls', type=float, default=1, help='preclassifier loss regularizer')
parser.add_argument('--weight_critic', type=int, default=10, help='critic loss regularizer')
parser.add_argument('--weight_generator', type=int, default=10, help='generator loss regularizer')
parser.add_argument('--weight_feed_train', type=float, default=1.0, help='feedback output weight for training')
parser.add_argument('--weight_feed_eval', type=float, default=1.0, help='feedback output weight for evaluation')
parser.add_argument('--weight_recons', type=float, default=1.0, help='reconstruction loss regularizer')
parser.add_argument('--center_margin', type=float, default=150, help='the margin in the SAMC loss')
parser.add_argument('--weight_margin', type=float, default=0.5, help='the weight for the SAMC loss')
parser.add_argument('--weight_center', type=float, default=0.5, help='the weight for inter-class (vs. intra-class) distance in the SAMC loss')

args = parser.parse_args()
